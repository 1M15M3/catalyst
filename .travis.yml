dist: trusty
language: python
sudo: required
fast_finish: true
matrix:
  include:
  - python: 2.7
    env: NUMPY_VERSION=1.13.1 SCIPY_VERSION=0.19.1
  - python: 3.6
    env: NUMPY_VERSION=1.14 SCIPY_VERSION=1.0.0
cache:
  directories:
  - "$HOME/.cache/pip"
  - "$HOME/miniconda"
  timeout: 1000
env:
  global:
  - MINICONDA_DIR="$HOME/miniconda${TRAVIS_PYTHON_VERSION:0:1}"
before_install:
- curl -L http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz --output
  ta-lib-0.4.0-src.tar.gz
- tar zxf ta-lib-0.4.0-src.tar.gz
- cd ta-lib && ./configure --prefix=/usr && make && sudo make install && cd ..
- |
  if [ -d "$MINICONDA_DIR" ] && [ -e "$MINICONDA_DIR/bin/conda" ]; then
    echo "Miniconda install already present from cache: $MINICONDA_DIR"
    export PATH="$MINICONDA_DIR/bin:$PATH"
  else
    rm -rf "$MINICONDA_DIR"
    if [ ${TRAVIS_PYTHON_VERSION:0:1} == "2" ]; then wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh; else wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh; fi
    bash miniconda.sh -b -p "$MINICONDA_DIR"
  fi
- export PATH="$MINICONDA_DIR/bin:$PATH"
- conda update --yes conda
install:
- conda info -a
- TALIB_VERSION=$(cat ./etc/requirements_talib.txt | sed "s/TA-Lib==\(.*\)/\1/")
- IFS='.' read -r -a NPY_VERSION_ARR <<< "$NUMPY_VERSION"
- CONDA_NPY=${NPY_VERSION_ARR[0]}${NPY_VERSION_ARR[1]}
- CONDA_PY=$TRAVIS_PYTHON_VERSION
- "if [ ! -d \"$MINICONDA_DIR/envs/testenv$TRAVIS_PYTHON_VERSION\" ]; then\n  conda
  create -n testenv$TRAVIS_PYTHON_VERSION --use-local --yes pip python=$TRAVIS_PYTHON_VERSION
  numpy=$NUMPY_VERSION scipy=$SCIPY_VERSION libgfortran=3.0 certifi=2018.1.18\nfi
  \ \n"
- source activate testenv$TRAVIS_PYTHON_VERSION
- CACHE_DIR="$HOME/.cache/pip/pip_np""$CONDA_NPY"
- pip install --upgrade pip coverage coveralls --cache-dir=$CACHE_DIR
- pip install -r etc/requirements.txt --cache-dir=$CACHE_DIR
- pip install -r etc/requirements_dev.txt --cache-dir=$CACHE_DIR
- pip install -r etc/requirements_blaze.txt --cache-dir=$CACHE_DIR
- pip install -r etc/requirements_talib.txt --cache-dir=$CACHE_DIR
- pip install -e . --cache-dir=$CACHE_DIR
before_script:
- pip freeze | sort
script:
- flake8 catalyst tests
- cd tests && nosetests
after_success:
- coveralls
notifications:
  email:
    on_success: always
    on_failure: always
  slack:
    rooms:
      - secure: UWy/Wb7rD/piZtOAEDzlYkelxbnEoADZDao8tlupG+/lWkWtSojmKINzd5c0CmKMZF/XU5C1W1q0T0QSrA9v4WDnrPFB2CLZ+H3GCLu3VO71OBjk3Yylc0NFViCyEftlkWxG6Apb7mUa07C6w8ZBP/+s1cnYOgPTGylnBo8/NUE7xxN1tdP9JC8EsX8uRILheu3/cbKtxVY3eHXnWEUbZ8hSy2FX9ypL9rUv7MeTp8plLZpwM48ACV66F+7BDxLLFduXOFZ8lJH7HNc/oAq0CpCL51tL17Jy27k5/RMBp5i2INYIe6oY2urQC81Mv3c9W2IGY2InPWtXeG6bTThkScyRvqbakL/O7fPJNc2Y0y6DzpCqeKK7H8cSaljJk5alkyfDYb1AkiB/MQVVUXLJZVHskOLuZgSnFTKef1c438zbbcaG7iU2GJxsJujqcYuTwAUwkuv9xCbrhRuUuHuR521aAg2wu8LckRHfZxmfvUtMGX036fSJJQnDzCXJA4weTS7KTJ1bE34ELtpbF50SdyIgQjWLfz5oMDiRvVNeuxeJSOHSj2/4BpSVCeNNII5OrguaBqAHowabdTn1GE/CiYQUekQ73mLLhRKzfVro8OQAwjEa9HlYVt6JtU1iWCa0CcDZSqgLFVN8lk+53xozqywFHqPh3fnhowmB7Vnfw3I=
    on_success: always
    on_failure: always